{
  "language": "Solidity",
  "sources": {
    "contracts/__mocks__/GaugeMock.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.13;\n\nimport {ERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract GaugeMock is ERC20 {\n    IERC20 public immutable stakingToken;\n    mapping(address => address) public treasuryByRewardTkn;\n    address[] public tokenRewards;\n\n    constructor(IERC20 stakingToken_) ERC20(\"Gauge Token\", \"GTO\") {\n        stakingToken = stakingToken_;\n    }\n\n    function deposit(uint256 mintAmount_, address receiver_) external {\n        stakingToken.transferFrom(msg.sender, address(this), mintAmount_);\n\n        _mint(receiver_, mintAmount_);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function add_reward(address rewardToken_, address treasury_) external {\n        treasuryByRewardTkn[rewardToken_] = treasury_;\n        tokenRewards.push(rewardToken_);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function deposit_reward_token(address rewardToken_, uint256 amount_)\n        external\n    {\n        require(treasuryByRewardTkn[rewardToken_] == msg.sender);\n\n        IERC20(rewardToken_).transferFrom(msg.sender, address(this), amount_);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function claim_rewards(address account_) external {\n        for (uint256 i = 0; i < tokenRewards.length; i++) {\n            uint256 rewardTokenBalance =\n                IERC20(tokenRewards[0]).balanceOf(address(this));\n\n            if (rewardTokenBalance != 0) {\n                uint256 reward =\n                    (rewardTokenBalance * balanceOf(account_)) / totalSupply();\n\n                if (reward > 0) {\n                    IERC20(tokenRewards[0]).transfer(account_, reward);\n                }\n            }\n        }\n    }\n\n    function withdraw(uint256 burnAmount_) external {\n        uint256 stakingTokenBalance =\n            IERC20(stakingToken).balanceOf(address(this));\n\n        require(burnAmount_ <= balanceOf(msg.sender));\n\n        uint256 stake = (stakingTokenBalance * burnAmount_) / totalSupply();\n\n        if (stake > 0) {\n            stakingToken.transfer(msg.sender, stake);\n            _burn(msg.sender, burnAmount_);\n        }\n    }\n\n    // solhint-disable-next-line func-name-mixedcase, no-unused-vars\n    function claimable_reward(address account_, address rewardToken_)\n        external\n        view\n        returns (uint256)\n    {\n        // if (IERC20(rewardToken_).balanceOf(address(this)) == 0) return 0;\n        return balanceOf(account_);\n    }\n\n    // solhint-disable-next-line func-name-mixedcase\n    function staking_token() external view returns (address) {\n        return address(stakingToken);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../../access/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"5c60da1b\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(hex\"f851a440\");\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/ArrakisV2RouterWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.13;\n\nimport {\n    IERC20,\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {\n    Initializable\n} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {\n    PausableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {\n    OwnableUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport {\n    AddLiquidityData,\n    MintData,\n    RemoveLiquidityData,\n    AddAndSwapData\n} from \"./structs/SArrakisV2Router.sol\";\n\nimport {IGauge} from \"./interfaces/IGauge.sol\";\nimport {IArrakisV2Router} from \"./interfaces/IArrakisV2Router.sol\";\nimport {IArrakisV2} from \"./interfaces/IArrakisV2.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\nimport {\n    IArrakisV2RouterWrapper\n} from \"./interfaces/IArrakisV2RouterWrapper.sol\";\nimport {IArrakisV2Resolver} from \"./interfaces/IArrakisV2Resolver.sol\";\n\ncontract ArrakisV2RouterWrapper is\n    IArrakisV2RouterWrapper,\n    Initializable,\n    PausableUpgradeable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    IWETH public immutable weth;\n    IArrakisV2Resolver public immutable resolver;\n    IArrakisV2Router public router;\n\n    constructor(IWETH _weth, IArrakisV2Resolver _resolver) {\n        weth = _weth;\n        resolver = _resolver;\n    }\n\n    function initialize(address owner_) external initializer {\n        __Pausable_init();\n        _transferOwnership(owner_);\n        __ReentrancyGuard_init();\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /// @notice addLiquidity adds liquidity to ArrakisV2 vault of interest (mints LP tokens)\n    /// @param _addData AddLiquidityData struct containing data for adding liquidity\n    /// @return amount0 amount of token0 transferred from msg.sender to mint `mintAmount`\n    /// @return amount1 amount of token1 transferred from msg.sender to mint `mintAmount`\n    /// @return mintAmount amount of ArrakisV2 tokens minted and transferred to `receiver`\n    // solhint-disable-next-line code-complexity, function-max-lines\n    function addLiquidity(AddLiquidityData memory _addData)\n        external\n        payable\n        override\n        whenNotPaused\n        nonReentrant\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount\n        )\n    {\n        require(\n            _addData.amount0Max > 0 || _addData.amount1Max > 0,\n            \"Empty max amounts\"\n        );\n        if (_addData.gaugeAddress != address(0)) {\n            require(\n                address(_addData.vault) ==\n                    IGauge(_addData.gaugeAddress).staking_token(),\n                \"Incorrect gauge!\"\n            );\n        }\n        (uint256 amount0In, uint256 amount1In, uint256 _mintAmount) =\n            resolver.getMintAmounts(\n                _addData.vault,\n                _addData.amount0Max,\n                _addData.amount1Max\n            );\n        require(\n            amount0In >= _addData.amount0Min &&\n                amount1In >= _addData.amount1Min,\n            \"below min amounts\"\n        );\n        require(_mintAmount > 0, \"nothing to mint\");\n\n        bool isToken0Weth;\n        if (_addData.useETH) {\n            isToken0Weth = _wrapAndTransferETH(\n                _addData.vault,\n                amount0In,\n                amount1In,\n                false\n            );\n        }\n\n        if (\n            amount0In > 0 &&\n            (!_addData.useETH || (_addData.useETH && !isToken0Weth))\n        ) {\n            IERC20(_addData.vault.token0()).safeTransferFrom(\n                msg.sender,\n                address(router),\n                amount0In\n            );\n        }\n        if (\n            amount1In > 0 &&\n            (!_addData.useETH || (_addData.useETH && isToken0Weth))\n        ) {\n            IERC20(_addData.vault.token1()).safeTransferFrom(\n                msg.sender,\n                address(router),\n                amount1In\n            );\n        }\n\n        MintData memory _mintData =\n            MintData(\n                _addData.vault,\n                amount0In,\n                amount1In,\n                _mintAmount,\n                _addData.receiver,\n                _addData.gaugeAddress\n            );\n        (amount0, amount1, mintAmount) = router.addLiquidity(_mintData);\n\n        if (_addData.useETH) {\n            if (isToken0Weth && msg.value > amount0) {\n                payable(msg.sender).sendValue(msg.value - amount0);\n            } else if (!isToken0Weth && msg.value > amount1) {\n                payable(msg.sender).sendValue(msg.value - amount1);\n            }\n        }\n    }\n\n    /// @notice removeLiquidity removes liquidity from vault and burns LP tokens\n    /// @param _removeData RemoveLiquidityData struct containing data for withdrawals\n    /// @return amount0 actual amount of token0 transferred to receiver for burning `burnAmount`\n    /// @return amount1 actual amount of token1 transferred to receiver for burning `burnAmount`\n    // solhint-disable-next-line code-complexity, function-max-lines\n    function removeLiquidity(RemoveLiquidityData memory _removeData)\n        external\n        override\n        whenNotPaused\n        nonReentrant\n        returns (uint256 amount0, uint256 amount1)\n    {\n        require(_removeData.burnAmount > 0, \"nothing to burn\");\n        if (_removeData.gaugeAddress != address(0)) {\n            require(\n                address(_removeData.vault) ==\n                    IGauge(_removeData.gaugeAddress).staking_token(),\n                \"Incorrect gauge!\"\n            );\n            IGauge(_removeData.gaugeAddress).claim_rewards(msg.sender);\n            IERC20(_removeData.gaugeAddress).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _removeData.burnAmount\n            );\n\n            IGauge(_removeData.gaugeAddress).withdraw(_removeData.burnAmount);\n            IERC20(address(_removeData.vault)).safeTransfer(\n                address(router),\n                _removeData.burnAmount\n            );\n        } else {\n            IERC20(address(_removeData.vault)).safeTransferFrom(\n                msg.sender,\n                address(router),\n                _removeData.burnAmount\n            );\n        }\n        (amount0, amount1) = router.removeLiquidity(_removeData);\n    }\n\n    /// @notice swapAndAddLiquidity transfer tokens to and calls ArrakisV2Router\n    /// @param _swapData SwapData struct containing data for swap\n    /// @return amount0 amount of token0 transferred from msg.sender to mint `mintAmount`\n    /// @return amount1 amount of token1 transferred from msg.sender to mint `mintAmount`\n    /// @return mintAmount amount of ArrakisV2 tokens minted and transferred to `receiver`\n    /// @return amount0Diff token0 balance difference post swap\n    /// @return amount1Diff token1 balance difference post swap\n    // solhint-disable-next-line code-complexity, function-max-lines\n    function swapAndAddLiquidity(AddAndSwapData memory _swapData)\n        external\n        payable\n        override\n        whenNotPaused\n        nonReentrant\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount,\n            uint256 amount0Diff,\n            uint256 amount1Diff\n        )\n    {\n        require(\n            _swapData.amount0Max > 0 || _swapData.amount1Max > 0,\n            \"Empty max amounts\"\n        );\n        if (_swapData.gaugeAddress != address(0)) {\n            require(\n                address(_swapData.vault) ==\n                    IGauge(_swapData.gaugeAddress).staking_token(),\n                \"Incorrect gauge!\"\n            );\n        }\n        bool isToken0Weth;\n        if (_swapData.useETH) {\n            isToken0Weth = _wrapAndTransferETH(\n                _swapData.vault,\n                _swapData.amount0Max,\n                _swapData.amount1Max,\n                true\n            );\n        }\n\n        if (\n            _swapData.amount0Max > 0 &&\n            (!_swapData.useETH || (_swapData.useETH && !isToken0Weth))\n        ) {\n            IERC20(_swapData.vault.token0()).safeTransferFrom(\n                msg.sender,\n                address(router),\n                _swapData.amount0Max\n            );\n        }\n        if (\n            _swapData.amount1Max > 0 &&\n            (!_swapData.useETH || (_swapData.useETH && isToken0Weth))\n        ) {\n            IERC20(_swapData.vault.token1()).safeTransferFrom(\n                msg.sender,\n                address(router),\n                _swapData.amount1Max\n            );\n        }\n\n        _swapData.userToRefund = payable(msg.sender);\n        (amount0, amount1, mintAmount, amount0Diff, amount1Diff) = router\n            .swapAndAddLiquidity(_swapData);\n    }\n\n    /// @notice updates address of ArrakisV2Router used by this wrapper\n    /// @param _router the router address\n    function updateRouter(IArrakisV2Router _router) external onlyOwner {\n        router = _router;\n    }\n\n    /// @notice _wrapAndTransferETH wrap ETH into WETH and transfers to router\n    /// @param vault The ArrakisV2 vault\n    /// @param amount0In amount of token1 to be wrapped and transfered (if isToken0Weth)\n    /// @param amount1In amount of token1 to be wrapped and transfered (if !isToken0Weth)\n    /// @return isToken0Weth bool indicating which token is WETH\n    function _wrapAndTransferETH(\n        IArrakisV2 vault,\n        uint256 amount0In,\n        uint256 amount1In,\n        bool matchAmount\n    ) internal returns (bool isToken0Weth) {\n        isToken0Weth = _isToken0Weth(\n            address(vault.token0()),\n            address(vault.token1())\n        );\n        uint256 wethAmount = isToken0Weth ? amount0In : amount1In;\n        if (matchAmount) {\n            require(wethAmount == msg.value, \"Invalid amount of ETH forwarded\");\n        } else {\n            require(wethAmount <= msg.value, \"Not enough ETH forwarded\");\n        }\n\n        weth.deposit{value: wethAmount}();\n        IERC20(address(weth)).safeTransfer(address(router), wethAmount);\n    }\n\n    function _isToken0Weth(address token0, address token1)\n        internal\n        view\n        returns (bool wethToken0)\n    {\n        if (token0 == address(weth)) {\n            wethToken0 = true;\n        } else if (token1 == address(weth)) {\n            wethToken0 = false;\n        } else {\n            revert(\"one vault token must be WETH\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/structs/SArrakisV2Router.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.13;\n\nimport {BurnLiquidity} from \"./SArrakisV2.sol\";\n\nimport {IArrakisV2} from \"../interfaces/IArrakisV2.sol\";\nimport {IGauge} from \"../interfaces/IGauge.sol\";\n\nstruct AddLiquidityData {\n    // address of ArrakisV2 vault\n    IArrakisV2 vault;\n    // maximum amount of token0 to forward on mint\n    uint256 amount0Max;\n    // maximum amount of token1 to forward on mint\n    uint256 amount1Max;\n    // the minimum amount of token0 actually deposited (slippage protection)\n    uint256 amount0Min;\n    // the minimum amount of token1 actually deposited (slippage protection)\n    uint256 amount1Min;\n    // account to receive minted tokens\n    address receiver;\n    // bool indicating to use native ETH\n    bool useETH;\n    // address of gauge to stake tokens in\n    address gaugeAddress;\n}\n\nstruct MintData {\n    // address of ArrakisV2 vault\n    IArrakisV2 vault;\n    // amount of token0 to deposit\n    uint256 amount0In;\n    // amount of token1 to deposit\n    uint256 amount1In;\n    // amount of LP tokens to mint\n    uint256 mintAmount;\n    // account to receive minted tokens\n    address receiver;\n    // address of gauge to stake tokens in\n    address gaugeAddress;\n}\n\nstruct RemoveLiquidityData {\n    // address of ArrakisV2 vault\n    IArrakisV2 vault;\n    // array of BurnLiquidity\n    BurnLiquidity[] burns;\n    // amount of LP tokens to burn\n    uint256 burnAmount;\n    // minimum amount of token0 to receive\n    uint256 amount0Min;\n    // minimum amount of token1 to receive\n    uint256 amount1Min;\n    // address to receive underlying tokens\n    address payable receiver;\n    // bool indicating if user wants to receive in native ETH\n    bool receiveETH;\n    // address of gauge to unstake from\n    address gaugeAddress;\n}\n\nstruct AddAndSwapData {\n    // address of ArrakisV2 vault\n    IArrakisV2 vault;\n    // maximum amount of token0 to forward on mint\n    uint256 amount0Max;\n    // maximum amount of token1 to forward on mint\n    uint256 amount1Max;\n    // the minimum amount of token0 actually deposited (slippage protection)\n    uint256 amount0Min;\n    // the minimum amount of token1 actually deposited (slippage protection)\n    uint256 amount1Min;\n    // account to receive minted tokens\n    address receiver;\n    // bool indicating to use native ETH\n    bool useETH;\n    // address of gauge to stake tokens in\n    address gaugeAddress;\n    // max amount being swapped\n    uint256 amountInSwap;\n    // min amount received on swap\n    uint256 amountOutSwap;\n    // bool indicating swap direction\n    bool zeroForOne;\n    // address for swap calls\n    address swapRouter;\n    // payload for swap call\n    bytes swapPayload;\n    // address of the user to be refunded\n    address payable userToRefund;\n}\n"
    },
    "contracts/interfaces/IGauge.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.13;\n\ninterface IGauge {\n    function deposit(uint256 amount, address account) external;\n\n    function withdraw(uint256 amount) external;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function claim_rewards(address account) external;\n\n    // solhint-disable-next-line func-name-mixedcase\n    function staking_token() external returns (address);\n}\n"
    },
    "contracts/interfaces/IArrakisV2Router.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.13;\n\nimport {\n    MintData,\n    RemoveLiquidityData,\n    AddAndSwapData\n} from \"../structs/SArrakisV2Router.sol\";\n\ninterface IArrakisV2Router {\n    function addLiquidity(MintData memory _mintData)\n        external\n        payable\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount\n        );\n\n    function removeLiquidity(RemoveLiquidityData memory _removeData)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swapAndAddLiquidity(AddAndSwapData memory _swapData)\n        external\n        payable\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount,\n            uint256 amount0Diff,\n            uint256 amount1Diff\n        );\n}\n"
    },
    "contracts/interfaces/IArrakisV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {\n    IUniswapV3Factory\n} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IManagerProxyV2} from \"./IManagerProxyV2.sol\";\nimport {\n    Range,\n    BurnLiquidity,\n    InitializePayload,\n    Rebalance\n} from \"../structs/SArrakisV2.sol\";\n\ninterface IArrakisV2 {\n    function initialize(\n        string calldata name_,\n        string calldata symbol_,\n        InitializePayload calldata params_\n    ) external;\n\n    // #region state modifiying functions.\n\n    function mint(uint256 mintAmount_, address receiver_)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function burn(\n        BurnLiquidity[] calldata burns,\n        uint256 burnAmount_,\n        address receiver_\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    function rebalance(\n        Range[] calldata rangesToAdd_,\n        Rebalance calldata rebalanceParams_,\n        Range[] calldata rangesToRemove_\n    ) external;\n\n    // #endregion state modifiying functions.\n\n    function totalSupply() external view returns (uint256);\n\n    function factory() external view returns (IUniswapV3Factory);\n\n    function token0() external view returns (IERC20);\n\n    function token1() external view returns (IERC20);\n\n    function init0() external view returns (uint256);\n\n    function init1() external view returns (uint256);\n\n    function rangesLength() external view returns (uint256);\n\n    function rangesArray() external view returns (Range[] memory);\n\n    function arrakisFeeBPS() external view returns (uint16);\n\n    function manager() external view returns (IManagerProxyV2);\n\n    function twapDuration() external view returns (uint24);\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.13;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/interfaces/IArrakisV2RouterWrapper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity 0.8.13;\n\nimport {IArrakisV2} from \"./IArrakisV2.sol\";\n\nimport {\n    AddLiquidityData,\n    RemoveLiquidityData,\n    AddAndSwapData\n} from \"../structs/SArrakisV2Router.sol\";\n\ninterface IArrakisV2RouterWrapper {\n    function addLiquidity(AddLiquidityData memory _addData)\n        external\n        payable\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount\n        );\n\n    function removeLiquidity(RemoveLiquidityData memory _removeData)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swapAndAddLiquidity(AddAndSwapData memory _swapData)\n        external\n        payable\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount,\n            uint256 amount0Diff,\n            uint256 amount1Diff\n        );\n}\n"
    },
    "contracts/interfaces/IArrakisV2Resolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {IArrakisV2} from \"./IArrakisV2.sol\";\nimport {RangeWeight, Rebalance, BurnLiquidity} from \"../structs/SArrakisV2.sol\";\n\ninterface IArrakisV2Resolver {\n    function calculateSwapAmount(\n        IArrakisV2 vault,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 price18Decimals\n    ) external view returns (bool zeroForOne, uint256 swapAmount);\n\n    function getEqualWeightsForRanges(IArrakisV2 vault)\n        external\n        view\n        returns (RangeWeight[] memory rangeWeights);\n\n    function standardRebalance(\n        RangeWeight[] memory rangeWeights_,\n        IArrakisV2 vaultV2_\n    ) external view returns (Rebalance memory rebalanceParams);\n\n    function standardBurnParams(uint256 amountToBurn_, IArrakisV2 vaultV2_)\n        external\n        view\n        returns (BurnLiquidity[] memory burns);\n\n    function getMintAmounts(\n        IArrakisV2 vaultV2_,\n        uint256 amount0Max_,\n        uint256 amount1Max_\n    )\n        external\n        view\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount\n        );\n\n    function getAmountsForLiquidity(\n        int24 currentTick_,\n        int24 lowerTick_,\n        int24 upperTick_,\n        uint128 liquidity_\n    ) external pure returns (uint256 amount0, uint256 amount1);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/structs/SArrakisV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {\n    IUniswapV3Pool\n} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport {\n    IUniswapV3Factory\n} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\n\nstruct PositionLiquidity {\n    uint128 liquidity;\n    Range range;\n}\n\nstruct BurnLiquidity {\n    uint128 liquidity;\n    Range range;\n}\n\nstruct SwapPayload {\n    bytes payload;\n    address router;\n    uint256 amountIn;\n    uint256 expectedMinReturn;\n    bool zeroForOne;\n}\n\nstruct Range {\n    int24 lowerTick;\n    int24 upperTick;\n    uint24 feeTier;\n}\n\nstruct Rebalance {\n    PositionLiquidity[] removes;\n    PositionLiquidity[] deposits;\n    SwapPayload swap;\n}\n\nstruct RangeWeight {\n    Range range;\n    uint256 weight; // should be between 0 and 100%\n}\n\nstruct InitializePayload {\n    uint24[] feeTiers;\n    address token0;\n    address token1;\n    address owner;\n    address[] operators;\n    Range[] ranges;\n    uint256 init0;\n    uint256 init1;\n    address managerTreasury;\n    uint16 managerFeeBPS;\n    int24 maxTwapDeviation;\n    uint24 twapDuration;\n}\n\n// #region internal Structs\n\nstruct UnderlyingOutput {\n    uint256 amount0;\n    uint256 amount1;\n    uint256 fee0;\n    uint256 fee1;\n    uint256 leftOver0;\n    uint256 leftOver1;\n}\n\nstruct FeesEarnedPayload {\n    uint256 feeGrowthInsideLast;\n    uint256 liquidity;\n    int24 tick;\n    int24 lowerTick;\n    int24 upperTick;\n    bool isZero;\n    IUniswapV3Pool pool;\n}\n\nstruct PositionUnderlying {\n    bytes32 positionId;\n    uint160 sqrtPriceX96;\n    int24 tick;\n    int24 lowerTick;\n    int24 upperTick;\n    IUniswapV3Pool pool;\n}\n\nstruct Withdraw {\n    uint256 burn0;\n    uint256 burn1;\n    uint256 fee0;\n    uint256 fee1;\n}\n\nstruct UnderlyingPayload {\n    Range[] ranges;\n    IUniswapV3Factory factory;\n    address token0;\n    address token1;\n    address self;\n}\n\nstruct RangeData {\n    address self;\n    Range range;\n    IUniswapV3Pool pool;\n}\n\n// #endregion internal Structs\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/interfaces/IManagerProxyV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {IManagerProxy} from \"./IManagerProxy.sol\";\n\ninterface IManagerProxyV2 is IManagerProxy {\n    function managerFeeBPS() external view returns (uint16);\n}\n"
    },
    "contracts/interfaces/IManagerProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable-next-line compiler-version\npragma solidity >=0.8.0;\n\ninterface IManagerProxy {\n    // ======= EXTERNAL FUNCTIONS =======\n    function fundVaultBalance(address vault) external payable;\n}\n"
    },
    "contracts/ArrakisV2Router.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.13;\n\nimport {\n    IERC20,\n    SafeERC20\n} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport {\n    MintData,\n    RemoveLiquidityData,\n    AddAndSwapData\n} from \"./structs/SArrakisV2Router.sol\";\n\nimport {IArrakisV2Router} from \"./interfaces/IArrakisV2Router.sol\";\nimport {IGauge} from \"./interfaces/IGauge.sol\";\nimport {IArrakisV2} from \"./interfaces/IArrakisV2.sol\";\nimport {IArrakisV2Resolver} from \"./interfaces/IArrakisV2Resolver.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\n\nimport {GelatoBytes} from \"./vendor/gelato/GelatoBytes.sol\";\n\n// @notice External functions of this contract can only be called by ArrakisV2RouterWrapper\n// @notice do not give approvals to this contract's address\ncontract ArrakisV2Router is IArrakisV2Router {\n    using Address for address payable;\n    using SafeERC20 for IERC20;\n\n    IWETH public immutable weth;\n    address public immutable routerWrapperAddress;\n    IArrakisV2Resolver public immutable resolver;\n\n    event Swapped(\n        bool zeroForOne,\n        uint256 amount0Diff,\n        uint256 amount1Diff,\n        uint256 amountOutSwap\n    );\n\n    modifier onlyRouterWrapper() {\n        require(msg.sender == routerWrapperAddress, \"onlyRouterWrapper\");\n        _;\n    }\n\n    constructor(\n        IWETH _weth,\n        address _routerWrapperAddress,\n        IArrakisV2Resolver _resolver\n    ) {\n        weth = _weth;\n        routerWrapperAddress = _routerWrapperAddress;\n        resolver = _resolver;\n    }\n\n    // solhint-disable-next-line no-empty-blocks\n    receive() external payable {}\n\n    /// @notice addLiquidity adds liquidity to ArrakisV2 vault of interest (mints LP tokens)\n    /// @param _mintData MintData struct containing data for minting\n    /// @return amount0 amount of token0 transferred from msg.sender to mint `mintAmount`\n    /// @return amount1 amount of token1 transferred from msg.sender to mint `mintAmount`\n    /// @return mintAmount amount of ArrakisV2 tokens minted and transferred to `receiver`\n    // solhint-disable-next-line code-complexity, function-max-lines\n    function addLiquidity(MintData memory _mintData)\n        external\n        payable\n        override\n        onlyRouterWrapper\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount\n        )\n    {\n        if (_mintData.gaugeAddress != address(0)) {\n            _deposit(\n                _mintData.vault,\n                _mintData.amount0In,\n                _mintData.amount1In,\n                _mintData.mintAmount,\n                address(this)\n            );\n\n            IERC20(address(_mintData.vault)).safeIncreaseAllowance(\n                _mintData.gaugeAddress,\n                _mintData.mintAmount\n            );\n\n            IGauge(_mintData.gaugeAddress).deposit(\n                _mintData.mintAmount,\n                _mintData.receiver\n            );\n        } else {\n            _deposit(\n                _mintData.vault,\n                _mintData.amount0In,\n                _mintData.amount1In,\n                _mintData.mintAmount,\n                _mintData.receiver\n            );\n        }\n        amount0 = _mintData.amount0In;\n        amount1 = _mintData.amount1In;\n        mintAmount = _mintData.mintAmount;\n    }\n\n    /// @param _removeData RemoveLiquidityData struct containing data for removing liquidity\n    /// @return amount0 amount of token0 received when burning `burnAmount`\n    /// @return amount1 amount of token1 received when burning `burnAmount`\n    // solhint-disable-next-line function-max-lines\n    function removeLiquidity(RemoveLiquidityData memory _removeData)\n        external\n        override\n        onlyRouterWrapper\n        returns (uint256 amount0, uint256 amount1)\n    {\n        if (_removeData.receiveETH) {\n            (amount0, amount1) = _removeData.vault.burn(\n                _removeData.burns,\n                _removeData.burnAmount,\n                address(this)\n            );\n        } else {\n            (amount0, amount1) = _removeData.vault.burn(\n                _removeData.burns,\n                _removeData.burnAmount,\n                _removeData.receiver\n            );\n        }\n\n        require(\n            amount0 >= _removeData.amount0Min &&\n                amount1 >= _removeData.amount1Min,\n            \"received below minimum\"\n        );\n\n        if (_removeData.receiveETH) {\n            _receiveETH(\n                _removeData.vault,\n                amount0,\n                amount1,\n                _removeData.receiver\n            );\n        }\n    }\n\n    // solhint-disable-next-line max-line-length\n    /// @notice swapAndAddLiquidity makes a swap and deposits to an ArrakisV2 vault and mints LP tokens\n    /// @param _swapData struct AddAndSwapData containing data for swap\n    /// @return amount0 amount of token0 transferred from msg.sender to mint `mintAmount`\n    /// @return amount1 amount of token1 transferred from msg.sender to mint `mintAmount`\n    /// @return mintAmount amount of ArrakisV2 tokens minted and transferred to `receiver`\n    /// @return amount0Diff token0 balance difference post swap\n    /// @return amount1Diff token1 balance difference post swap\n    // solhint-disable-next-line code-complexity, function-max-lines\n    function swapAndAddLiquidity(AddAndSwapData memory _swapData)\n        external\n        payable\n        override\n        onlyRouterWrapper\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount,\n            uint256 amount0Diff,\n            uint256 amount1Diff\n        )\n    {\n        (amount0Diff, amount1Diff) = _swap(_swapData);\n\n        uint256 amount0Use =\n            (_swapData.zeroForOne)\n                ? _swapData.amount0Max - amount0Diff\n                : _swapData.amount0Max + amount0Diff;\n        uint256 amount1Use =\n            (_swapData.zeroForOne)\n                ? _swapData.amount1Max + amount1Diff\n                : _swapData.amount1Max - amount1Diff;\n\n        (amount0, amount1, mintAmount) = resolver.getMintAmounts(\n            _swapData.vault,\n            amount0Use,\n            amount1Use\n        );\n\n        require(\n            amount0 >= _swapData.amount0Min && amount1 >= _swapData.amount1Min,\n            \"below min amounts\"\n        );\n\n        if (_swapData.gaugeAddress != address(0)) {\n            _deposit(\n                _swapData.vault,\n                amount0,\n                amount1,\n                mintAmount,\n                address(this)\n            );\n\n            IERC20(address(_swapData.vault)).safeIncreaseAllowance(\n                _swapData.gaugeAddress,\n                mintAmount\n            );\n            IGauge(_swapData.gaugeAddress).deposit(\n                mintAmount,\n                _swapData.receiver\n            );\n        } else {\n            _deposit(\n                _swapData.vault,\n                amount0,\n                amount1,\n                mintAmount,\n                _swapData.receiver\n            );\n        }\n\n        // now we send leftovers to user.\n        // if we can send leftovers in WETH, this logic would be much simpler\n        bool isToken0Weth;\n        if (_swapData.useETH) {\n            isToken0Weth = _isToken0Weth(\n                address(_swapData.vault.token0()),\n                address(_swapData.vault.token1())\n            );\n            if (isToken0Weth && amount0Use > amount0) {\n                _refundETH(_swapData.userToRefund, amount0Use - amount0);\n            } else if (!isToken0Weth && amount1Use > amount1) {\n                _refundETH(_swapData.userToRefund, amount1Use - amount1);\n            }\n        }\n\n        if (\n            amount0Use > amount0 &&\n            (!_swapData.useETH || (_swapData.useETH && !isToken0Weth))\n        ) {\n            IERC20(_swapData.vault.token0()).safeTransfer(\n                _swapData.userToRefund,\n                amount0Use - amount0\n            );\n        }\n        if (\n            amount1Use > amount1 &&\n            (!_swapData.useETH || (_swapData.useETH && isToken0Weth))\n        ) {\n            IERC20(_swapData.vault.token1()).safeTransfer(\n                _swapData.userToRefund,\n                amount1Use - amount1\n            );\n        }\n    }\n\n    function _deposit(\n        IArrakisV2 vault,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 mintAmount,\n        address receiver\n    ) internal {\n        if (amount0In > 0) {\n            vault.token0().safeIncreaseAllowance(address(vault), amount0In);\n        }\n        if (amount1In > 0) {\n            vault.token1().safeIncreaseAllowance(address(vault), amount1In);\n        }\n\n        (uint256 amount0, uint256 amount1) = vault.mint(mintAmount, receiver);\n\n        require(\n            amount0 == amount0In && amount1 == amount1In,\n            \"unexpected amounts deposited\"\n        );\n    }\n\n    // solhint-disable-next-line code-complexity\n    function _receiveETH(\n        IArrakisV2 vault,\n        uint256 amount0,\n        uint256 amount1,\n        address payable receiver\n    ) internal {\n        IERC20 token0 = vault.token0();\n        IERC20 token1 = vault.token1();\n        bool wethToken0 = _isToken0Weth(address(token0), address(token1));\n        if (wethToken0) {\n            if (amount0 > 0) {\n                weth.withdraw(amount0);\n                receiver.sendValue(amount0);\n            }\n            if (amount1 > 0) {\n                token1.safeTransfer(receiver, amount1);\n            }\n        } else {\n            if (amount1 > 0) {\n                weth.withdraw(amount1);\n                receiver.sendValue(amount1);\n            }\n            if (amount0 > 0) {\n                token0.safeTransfer(receiver, amount0);\n            }\n        }\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function _swap(AddAndSwapData memory _swapData)\n        internal\n        returns (uint256 amount0Diff, uint256 amount1Diff)\n    {\n        IERC20 token0 = _swapData.vault.token0();\n        IERC20 token1 = _swapData.vault.token1();\n        uint256 balance0Before = token0.balanceOf(address(this));\n        uint256 balance1Before = token1.balanceOf(address(this));\n\n        if (_swapData.zeroForOne) {\n            token0.safeIncreaseAllowance(\n                _swapData.swapRouter,\n                _swapData.amountInSwap\n            );\n        } else {\n            token1.safeIncreaseAllowance(\n                _swapData.swapRouter,\n                _swapData.amountInSwap\n            );\n        }\n        (bool success, bytes memory returnsData) =\n            _swapData.swapRouter.call(_swapData.swapPayload);\n        if (!success) GelatoBytes.revertWithError(returnsData, \"swap: \");\n\n        // setting allowance to 0\n        if (_swapData.zeroForOne) {\n            token0.safeApprove(_swapData.swapRouter, 0);\n        } else {\n            token1.safeApprove(_swapData.swapRouter, 0);\n        }\n\n        uint256 balance0 = token0.balanceOf(address(this));\n        uint256 balance1 = token1.balanceOf(address(this));\n        if (_swapData.zeroForOne) {\n            amount0Diff = balance0Before - balance0;\n            amount1Diff = balance1 - balance1Before;\n            require(\n                (amount0Diff == _swapData.amountInSwap) &&\n                    (amount1Diff >= _swapData.amountOutSwap),\n                \"Token0 swap failed!\"\n            );\n        } else {\n            amount0Diff = balance0 - balance0Before;\n            amount1Diff = balance1Before - balance1;\n            require(\n                (amount0Diff >= _swapData.amountOutSwap) &&\n                    (amount1Diff == _swapData.amountInSwap),\n                \"Token1 swap failed!\"\n            );\n        }\n\n        emit Swapped(\n            _swapData.zeroForOne,\n            amount0Diff,\n            amount1Diff,\n            _swapData.amountOutSwap\n        );\n    }\n\n    function _refundETH(address userToRefund, uint256 refundAmount) internal {\n        weth.withdraw(refundAmount);\n        payable(userToRefund).sendValue(refundAmount);\n    }\n\n    function _isToken0Weth(address token0, address token1)\n        internal\n        view\n        returns (bool wethToken0)\n    {\n        if (token0 == address(weth)) {\n            wethToken0 = true;\n        } else if (token1 == address(weth)) {\n            wethToken0 = false;\n        } else {\n            revert(\"one vault token must be WETH\");\n        }\n    }\n}\n"
    },
    "contracts/vendor/gelato/GelatoBytes.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.8.4;\n\nlibrary GelatoBytes {\n    function calldataSliceSelector(bytes calldata _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function memorySliceSelector(bytes memory _bytes)\n        internal\n        pure\n        returns (bytes4 selector)\n    {\n        selector =\n            _bytes[0] |\n            (bytes4(_bytes[1]) >> 8) |\n            (bytes4(_bytes[2]) >> 16) |\n            (bytes4(_bytes[3]) >> 24);\n    }\n\n    function revertWithError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                revert(string(abi.encodePacked(_tracingInfo, string(_bytes))));\n            } else {\n                revert(\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"))\n                );\n            }\n        } else {\n            revert(\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"))\n            );\n        }\n    }\n\n    function returnError(bytes memory _bytes, string memory _tracingInfo)\n        internal\n        pure\n        returns (string memory)\n    {\n        // 68: 32-location, 32-length, 4-ErrorSelector, UTF-8 err\n        if (_bytes.length % 32 == 4) {\n            bytes4 selector;\n            assembly {\n                selector := mload(add(0x20, _bytes))\n            }\n            if (selector == 0x08c379a0) {\n                // Function selector for Error(string)\n                assembly {\n                    _bytes := add(_bytes, 68)\n                }\n                return string(abi.encodePacked(_tracingInfo, string(_bytes)));\n            } else {\n                return\n                    string(abi.encodePacked(_tracingInfo, \"NoErrorSelector\"));\n            }\n        } else {\n            return\n                string(abi.encodePacked(_tracingInfo, \"UnexpectedReturndata\"));\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IArrakisV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {InitializePayload} from \"../structs/SArrakisV2.sol\";\n\ninterface IArrakisV2Factory {\n    event VaultCreated(address indexed manager, address indexed vault);\n\n    event InitFactory(address implementation);\n\n    event UpdateVaultImplementation(\n        address previousImplementation,\n        address newImplementation\n    );\n\n    function initialize(address implementation_, address _owner_) external;\n\n    function deployVault(InitializePayload calldata params_)\n        external\n        returns (address vault);\n\n    // #region view functions\n\n    function version() external view returns (string memory);\n\n    function vaultImplementation() external view returns (address);\n\n    function deployer() external view returns (address);\n\n    function index() external view returns (uint256);\n\n    function numVaultsByDeployer(address deployer_)\n        external\n        view\n        returns (uint256);\n\n    function getVaultsByDeployer(address deployer_)\n        external\n        view\n        returns (address[] memory);\n\n    // #endregion view functions\n}\n"
    },
    "contracts/interfaces/IGasStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// solhint-disable-next-line compiler-version\npragma solidity >=0.8.0;\n\nimport {Rebalance, Range} from \"../structs/SArrakisV2.sol\";\nimport {IManagerProxy} from \"./IManagerProxy.sol\";\nimport {VaultInfo} from \"../structs/SGasStation.sol\";\n\ninterface IGasStation is IManagerProxy {\n    event AddVault(address indexed vault, bytes datas, string strat);\n\n    event RemoveVault(address indexed vault, uint256 sendBack);\n\n    event SetVaultData(address indexed vault, bytes data);\n\n    event SetVaultStrat(address indexed vault, bytes32 strat);\n\n    event WhitelistStrat(address indexed gasStation, string strat);\n\n    event AddOperators(address indexed gasStation, address[] operators);\n\n    event RemoveOperators(address indexed gasStation, address[] operators);\n\n    event UpdateVaultBalance(address indexed vault, uint256 newBalance);\n\n    event ExpandTermDuration(\n        address indexed vault,\n        uint256 oldMmTermDuration,\n        uint256 newMmTermDuration\n    );\n\n    event ToggleRestrictMint(address indexed vault);\n\n    event WithdrawVaultBalance(\n        address indexed vault,\n        uint256 amount,\n        address to,\n        uint256 newBalance\n    );\n\n    event RebalanceVault(address indexed vault, uint256 newBalance);\n\n    // ======== GELATOFIED FUNCTIONS ========\n    function rebalance(\n        address vault_,\n        Range[] calldata ranges_,\n        Rebalance calldata rebalanceParams_,\n        Range[] calldata rangesToRemove_,\n        uint256 feeAmount_\n    ) external;\n\n    // ======= PERMISSIONED OWNER FUNCTIONS =====\n    function withdrawVaultBalance(\n        address vault_,\n        uint256 amount_,\n        address payable to_\n    ) external;\n\n    function addVault(\n        address vault_,\n        bytes calldata datas_,\n        string calldata strat_\n    ) external payable;\n\n    function removeVault(address vault_, address payable to_) external;\n\n    function setVaultData(address vault_, bytes calldata data_) external;\n\n    function setVaultStraByName(address vault_, string calldata strat_)\n        external;\n\n    function addOperators(address[] calldata operators_) external;\n\n    function removeOperators(address[] calldata operators_) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    // ======= PUBLIC FUNCTIONS =====\n\n    function fundVaultBalance(address vault_) external payable;\n\n    function expandMMTermDuration(address vault_) external;\n\n    function toggleRestrictMint(address vault_) external;\n\n    function getVaultInfo(address vault_)\n        external\n        view\n        returns (VaultInfo memory);\n\n    function managerFeeBPS() external view returns (uint16);\n\n    function getWhitelistedStrat() external view returns (bytes32[] memory);\n}\n"
    },
    "contracts/structs/SGasStation.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nstruct VaultInfo {\n    uint256 balance; // prepaid credit for rebalance\n    uint256 lastRebalance; // timestamp of the last rebalance\n    bytes datas; // custom bytes that can used to store data needed for rebalance.\n    bytes32 strat; // strat type\n    uint256 endOfMM; // expiry of the Market Making terms.\n}\n\nstruct VaultData {\n    address vault;\n    VaultInfo vaultInfo;\n}\n"
    },
    "contracts/GasStationHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {IGasStation} from \"./interfaces/IGasStation.sol\";\nimport {VaultInfo, VaultData} from \"./structs/SGasStation.sol\";\n\ncontract GasStationHelper {\n    IGasStation public immutable gasStation;\n\n    constructor(IGasStation gasStation_) {\n        gasStation = gasStation_;\n    }\n\n    function getVaultsByStrat(\n        address[] calldata vaults_,\n        string calldata strat_\n    ) external view returns (VaultData[] memory result) {\n        VaultInfo[] memory vaultsInfos = new VaultInfo[](vaults_.length);\n        uint256 nbOfVaultUsingStrat;\n        bytes32 hashedStrat = keccak256(abi.encodePacked(strat_));\n        for (uint256 i; i < vaults_.length; i++) {\n            vaultsInfos[i] = gasStation.getVaultInfo(vaults_[i]);\n            if (vaultsInfos[i].strat == hashedStrat) {\n                nbOfVaultUsingStrat++;\n            }\n        }\n\n        result = new VaultData[](nbOfVaultUsingStrat);\n        uint256 index;\n        for (uint256 i; i < vaultsInfos.length; i++) {\n            if (vaultsInfos[i].strat == hashedStrat) {\n                result[index] = VaultData({\n                    vault: vaults_[i],\n                    vaultInfo: vaultsInfos[i]\n                });\n                index++;\n            }\n        }\n    }\n\n    function getVaultsStrat(address[] calldata vaults_)\n        external\n        view\n        returns (VaultInfo[] memory result)\n    {\n        result = new VaultInfo[](vaults_.length);\n        for (uint256 i; i < vaults_.length; i++) {\n            result[i] = gasStation.getVaultInfo(vaults_[i]);\n        }\n    }\n}\n"
    },
    "contracts/libraries/UniswapV3Amounts.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {FullMath} from \"@arrakisfi/v3-lib-0.8/contracts/LiquidityAmounts.sol\";\nimport {FeesEarnedPayload} from \"../structs/SArrakisV2.sol\";\n\nlibrary UniswapV3Amounts {\n    // solhint-disable-next-line function-max-lines\n    function computeFeesEarned(FeesEarnedPayload memory computeFeesEarned_)\n        public\n        view\n        returns (uint256 fee)\n    {\n        uint256 feeGrowthOutsideLower;\n        uint256 feeGrowthOutsideUpper;\n        uint256 feeGrowthGlobal;\n        if (computeFeesEarned_.isZero) {\n            feeGrowthGlobal = computeFeesEarned_.pool.feeGrowthGlobal0X128();\n            (, , feeGrowthOutsideLower, , , , , ) = computeFeesEarned_\n                .pool\n                .ticks(computeFeesEarned_.lowerTick);\n            (, , feeGrowthOutsideUpper, , , , , ) = computeFeesEarned_\n                .pool\n                .ticks(computeFeesEarned_.upperTick);\n        } else {\n            feeGrowthGlobal = computeFeesEarned_.pool.feeGrowthGlobal1X128();\n            (, , , feeGrowthOutsideLower, , , , ) = computeFeesEarned_\n                .pool\n                .ticks(computeFeesEarned_.lowerTick);\n            (, , , feeGrowthOutsideUpper, , , , ) = computeFeesEarned_\n                .pool\n                .ticks(computeFeesEarned_.upperTick);\n        }\n\n        unchecked {\n            // calculate fee growth below\n            uint256 feeGrowthBelow;\n            if (computeFeesEarned_.tick >= computeFeesEarned_.lowerTick) {\n                feeGrowthBelow = feeGrowthOutsideLower;\n            } else {\n                feeGrowthBelow = feeGrowthGlobal - feeGrowthOutsideLower;\n            }\n\n            // calculate fee growth above\n            uint256 feeGrowthAbove;\n            if (computeFeesEarned_.tick < computeFeesEarned_.upperTick) {\n                feeGrowthAbove = feeGrowthOutsideUpper;\n            } else {\n                feeGrowthAbove = feeGrowthGlobal - feeGrowthOutsideUpper;\n            }\n\n            uint256 feeGrowthInside =\n                feeGrowthGlobal - feeGrowthBelow - feeGrowthAbove;\n            fee = FullMath.mulDiv(\n                computeFeesEarned_.liquidity,\n                feeGrowthInside - computeFeesEarned_.feeGrowthInsideLast,\n                0x100000000000000000000000000000000\n            );\n        }\n    }\n\n    function subtractAdminFees(\n        uint256 rawFee0_,\n        uint256 rawFee1_,\n        uint16 managerFeeBPS_,\n        uint16 arrakisFeeBPS_\n    ) public pure returns (uint256 fee0, uint256 fee1) {\n        fee0 =\n            rawFee0_ -\n            ((rawFee0_ * (managerFeeBPS_ + arrakisFeeBPS_)) / 10000);\n        fee1 =\n            rawFee1_ -\n            ((rawFee1_ * (managerFeeBPS_ + arrakisFeeBPS_)) / 10000);\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function computeMintAmounts(\n        uint256 current0_,\n        uint256 current1_,\n        uint256 totalSupply_,\n        uint256 amount0Max_,\n        uint256 amount1Max_\n    )\n        public\n        pure\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount\n        )\n    {\n        // compute proportional amount of tokens to mint\n        if (current0_ == 0 && current1_ > 0) {\n            mintAmount = FullMath.mulDiv(amount1Max_, totalSupply_, current1_);\n        } else if (current1_ == 0 && current0_ > 0) {\n            mintAmount = FullMath.mulDiv(amount0Max_, totalSupply_, current0_);\n        } else if (current0_ > 0 && current1_ > 0) {\n            uint256 amount0Mint =\n                FullMath.mulDiv(amount0Max_, totalSupply_, current0_);\n            uint256 amount1Mint =\n                FullMath.mulDiv(amount1Max_, totalSupply_, current1_);\n            require(\n                amount0Mint > 0 && amount1Mint > 0,\n                \"ArrakisVaultV2: mint 0\"\n            );\n\n            mintAmount = amount0Mint < amount1Mint ? amount0Mint : amount1Mint;\n        } else {\n            revert(\"ArrakisVaultV2: panic\");\n        }\n\n        // compute amounts owed to contract\n        amount0 = FullMath.mulDivRoundingUp(\n            mintAmount,\n            current0_,\n            totalSupply_\n        );\n        amount1 = FullMath.mulDivRoundingUp(\n            mintAmount,\n            current1_,\n            totalSupply_\n        );\n    }\n}\n"
    },
    "@arrakisfi/v3-lib-0.8/contracts/LiquidityAmounts.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.5.0;\n\nimport {FullMath} from \"./FullMath.sol\";\nimport {FixedPoint96} from \"@uniswap/v3-core/contracts/libraries/FixedPoint96.sol\";\n\n/// @title Liquidity amount functions\n/// @notice Provides functions for computing liquidity amounts from token amounts and prices\nlibrary LiquidityAmounts {\n    function toUint128(uint256 x) private pure returns (uint128 y) {\n        require((y = uint128(x)) == x);\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token0 and price range\n    /// @dev Calculates amount0 * (sqrt(upper) * sqrt(lower)) / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param amount0 The amount0 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount0(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        uint256 intermediate = FullMath.mulDiv(\n            sqrtRatioAX96,\n            sqrtRatioBX96,\n            FixedPoint96.Q96\n        );\n        return\n            toUint128(\n                FullMath.mulDiv(\n                    amount0,\n                    intermediate,\n                    sqrtRatioBX96 - sqrtRatioAX96\n                )\n            );\n    }\n\n    /// @notice Computes the amount of liquidity received for a given amount of token1 and price range\n    /// @dev Calculates amount1 / (sqrt(upper) - sqrt(lower)).\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param amount1 The amount1 being sent in\n    /// @return liquidity The amount of returned liquidity\n    function getLiquidityForAmount1(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n        return\n            toUint128(\n                FullMath.mulDiv(\n                    amount1,\n                    FixedPoint96.Q96,\n                    sqrtRatioBX96 - sqrtRatioAX96\n                )\n            );\n    }\n\n    /// @notice Computes the maximum amount of liquidity received for a given amount of token0, token1, the current\n    /// pool prices and the prices at the tick boundaries\n    function getLiquidityForAmounts(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128 liquidity) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            liquidity = getLiquidityForAmount0(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                amount0\n            );\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            uint128 liquidity0 = getLiquidityForAmount0(\n                sqrtRatioX96,\n                sqrtRatioBX96,\n                amount0\n            );\n            uint128 liquidity1 = getLiquidityForAmount1(\n                sqrtRatioAX96,\n                sqrtRatioX96,\n                amount1\n            );\n\n            liquidity = liquidity0 < liquidity1 ? liquidity0 : liquidity1;\n        } else {\n            liquidity = getLiquidityForAmount1(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                amount1\n            );\n        }\n    }\n\n    /// @notice Computes the amount of token0 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The liquidity being valued\n    /// @return amount0 The amount0\n    function getAmount0ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                uint256(liquidity) << FixedPoint96.RESOLUTION,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                sqrtRatioBX96\n            ) / sqrtRatioAX96;\n    }\n\n    /// @notice Computes the amount of token1 for a given amount of liquidity and a price range\n    /// @param sqrtRatioAX96 A sqrt price\n    /// @param sqrtRatioBX96 Another sqrt price\n    /// @param liquidity The liquidity being valued\n    /// @return amount1 The amount1\n    function getAmount1ForLiquidity(\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        return\n            FullMath.mulDiv(\n                liquidity,\n                sqrtRatioBX96 - sqrtRatioAX96,\n                FixedPoint96.Q96\n            );\n    }\n\n    /// @notice Computes the token0 and token1 value for a given amount of liquidity, the current\n    /// pool prices and the prices at the tick boundaries\n    function getAmountsForLiquidity(\n        uint160 sqrtRatioX96,\n        uint160 sqrtRatioAX96,\n        uint160 sqrtRatioBX96,\n        uint128 liquidity\n    ) internal pure returns (uint256 amount0, uint256 amount1) {\n        if (sqrtRatioAX96 > sqrtRatioBX96)\n            (sqrtRatioAX96, sqrtRatioBX96) = (sqrtRatioBX96, sqrtRatioAX96);\n\n        if (sqrtRatioX96 <= sqrtRatioAX96) {\n            amount0 = getAmount0ForLiquidity(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                liquidity\n            );\n        } else if (sqrtRatioX96 < sqrtRatioBX96) {\n            amount0 = getAmount0ForLiquidity(\n                sqrtRatioX96,\n                sqrtRatioBX96,\n                liquidity\n            );\n            amount1 = getAmount1ForLiquidity(\n                sqrtRatioAX96,\n                sqrtRatioX96,\n                liquidity\n            );\n        } else {\n            amount1 = getAmount1ForLiquidity(\n                sqrtRatioAX96,\n                sqrtRatioBX96,\n                liquidity\n            );\n        }\n    }\n}\n"
    },
    "@arrakisfi/v3-lib-0.8/contracts/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = a * b\n            // Compute the product mod 2**256 and mod 2**256 - 1\n            // then use the Chinese Remainder Theorem to reconstruct\n            // the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2**256 + prod0\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(a, b, not(0))\n                prod0 := mul(a, b)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division\n            if (prod1 == 0) {\n                require(denominator > 0);\n                assembly {\n                    result := div(prod0, denominator)\n                }\n                return result;\n            }\n\n            // Make sure the result is less than 2**256.\n            // Also prevents denominator == 0\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0]\n            // Compute remainder using mulmod\n            uint256 remainder;\n            assembly {\n                remainder := mulmod(a, b, denominator)\n            }\n            // Subtract 256 bit number from 512 bit number\n            assembly {\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator\n            // Compute largest power of two divisor of denominator.\n            // Always >= 1.\n            // EDIT for 0.8 compatibility:\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\n            uint256 twos = denominator & (~denominator + 1);\n\n            // Divide denominator by power of two\n            assembly {\n                denominator := div(denominator, twos)\n            }\n\n            // Divide [prod1 prod0] by the factors of two\n            assembly {\n                prod0 := div(prod0, twos)\n            }\n            // Shift in bits from prod1 into prod0. For this we need\n            // to flip `twos` such that it is 2**256 / twos.\n            // If twos is zero, then it becomes one\n            assembly {\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2**256\n            // Now that denominator is an odd number, it has an inverse\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n            // Compute the inverse by starting with a seed that is correct\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\n            uint256 inv = (3 * denominator) ^ 2;\n            // Now use Newton-Raphson iteration to improve the precision.\n            // Thanks to Hensel's lifting lemma, this also works in modular\n            // arithmetic, doubling the correct bits in each step.\n            inv *= 2 - denominator * inv; // inverse mod 2**8\n            inv *= 2 - denominator * inv; // inverse mod 2**16\n            inv *= 2 - denominator * inv; // inverse mod 2**32\n            inv *= 2 - denominator * inv; // inverse mod 2**64\n            inv *= 2 - denominator * inv; // inverse mod 2**128\n            inv *= 2 - denominator * inv; // inverse mod 2**256\n\n            // Because the division is now exact we can divide by multiplying\n            // with the modular inverse of denominator. This will give us the\n            // correct result modulo 2**256. Since the precoditions guarantee\n            // that the outcome is less than 2**256, this is the final result.\n            // We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inv;\n            return result;\n        }\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "@uniswap/v3-core/contracts/libraries/FixedPoint96.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.4.0;\n\n/// @title FixedPoint96\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\n/// @dev Used in SqrtPriceMath.sol\nlibrary FixedPoint96 {\n    uint8 internal constant RESOLUTION = 96;\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\n}\n"
    },
    "contracts/libraries/Underlying.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {\n    IUniswapV3Pool\n} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {\n    LiquidityAmounts\n} from \"@arrakisfi/v3-lib-0.8/contracts/LiquidityAmounts.sol\";\nimport {TickMath} from \"@arrakisfi/v3-lib-0.8/contracts/TickMath.sol\";\nimport {\n    UnderlyingPayload,\n    RangeData,\n    PositionUnderlying,\n    FeesEarnedPayload\n} from \"../structs/SArrakisV2.sol\";\nimport {UniswapV3Amounts} from \"./UniswapV3Amounts.sol\";\nimport {Position} from \"./Position.sol\";\n\nlibrary Underlying {\n    // solhint-disable-next-line function-max-lines\n    function totalUnderlyingWithFees(\n        UnderlyingPayload memory underlyingPayload_\n    )\n        public\n        view\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 fee0,\n            uint256 fee1\n        )\n    {\n        for (uint256 i = 0; i < underlyingPayload_.ranges.length; i++) {\n            {\n                IUniswapV3Pool pool =\n                    IUniswapV3Pool(\n                        underlyingPayload_.factory.getPool(\n                            underlyingPayload_.token0,\n                            underlyingPayload_.token1,\n                            underlyingPayload_.ranges[i].feeTier\n                        )\n                    );\n                (uint160 sqrtPriceX96, , , , , , ) = pool.slot0();\n                (uint256 a0, uint256 a1, uint256 f0, uint256 f1) =\n                    underlying(\n                        RangeData({\n                            self: underlyingPayload_.self,\n                            range: underlyingPayload_.ranges[i],\n                            pool: pool\n                        }),\n                        sqrtPriceX96\n                    );\n                amount0 += a0 + f0;\n                amount1 += a1 + f1;\n                fee0 += f0;\n                fee1 += f1;\n            }\n        }\n\n        amount0 += IERC20(underlyingPayload_.token0).balanceOf(\n            underlyingPayload_.self\n        );\n        amount1 += IERC20(underlyingPayload_.token1).balanceOf(\n            underlyingPayload_.self\n        );\n    }\n\n    function underlying(RangeData memory underlying_, uint160 sqrtPriceX96_)\n        public\n        view\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 fee0,\n            uint256 fee1\n        )\n    {\n        uint256 a0;\n        uint256 a1;\n        uint256 f0;\n        uint256 f1;\n        (, int24 tick, , , , , ) = underlying_.pool.slot0();\n        bytes32 positionId =\n            Position.getPositionId(\n                underlying_.self,\n                underlying_.range.lowerTick,\n                underlying_.range.upperTick\n            );\n        PositionUnderlying memory positionUnderlying =\n            PositionUnderlying({\n                positionId: positionId,\n                sqrtPriceX96: sqrtPriceX96_,\n                tick: tick,\n                lowerTick: underlying_.range.lowerTick,\n                upperTick: underlying_.range.upperTick,\n                pool: underlying_.pool\n            });\n        (a0, a1, f0, f1) = getUnderlyingBalances(positionUnderlying);\n        amount0 += a0;\n        amount1 += a1;\n        fee0 += f0;\n        fee1 += f1;\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function getUnderlyingBalances(\n        PositionUnderlying memory positionUnderlying_\n    )\n        public\n        view\n        returns (\n            uint256 amount0Current,\n            uint256 amount1Current,\n            uint256 fee0,\n            uint256 fee1\n        )\n    {\n        (\n            uint128 liquidity,\n            uint256 feeGrowthInside0Last,\n            uint256 feeGrowthInside1Last,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        ) = positionUnderlying_.pool.positions(positionUnderlying_.positionId);\n\n        // compute current holdings from liquidity\n        (amount0Current, amount1Current) = LiquidityAmounts\n            .getAmountsForLiquidity(\n            positionUnderlying_.sqrtPriceX96,\n            TickMath.getSqrtRatioAtTick(positionUnderlying_.lowerTick),\n            TickMath.getSqrtRatioAtTick(positionUnderlying_.upperTick),\n            liquidity\n        );\n\n        // compute current fees earned\n        fee0 =\n            UniswapV3Amounts.computeFeesEarned(\n                FeesEarnedPayload({\n                    feeGrowthInsideLast: feeGrowthInside0Last,\n                    liquidity: liquidity,\n                    tick: positionUnderlying_.tick,\n                    lowerTick: positionUnderlying_.lowerTick,\n                    upperTick: positionUnderlying_.upperTick,\n                    isZero: true,\n                    pool: positionUnderlying_.pool\n                })\n            ) +\n            uint256(tokensOwed0);\n        fee1 =\n            UniswapV3Amounts.computeFeesEarned(\n                FeesEarnedPayload({\n                    feeGrowthInsideLast: feeGrowthInside1Last,\n                    liquidity: liquidity,\n                    tick: positionUnderlying_.tick,\n                    lowerTick: positionUnderlying_.lowerTick,\n                    upperTick: positionUnderlying_.upperTick,\n                    isZero: false,\n                    pool: positionUnderlying_.pool\n                })\n            ) +\n            uint256(tokensOwed1);\n    }\n}\n"
    },
    "@arrakisfi/v3-lib-0.8/contracts/TickMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO =\n        1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick)\n        internal\n        pure\n        returns (uint160 sqrtPriceX96)\n    {\n        uint256 absTick = tick < 0\n            ? uint256(-int256(tick))\n            : uint256(int256(tick));\n\n        // EDIT: 0.8 compatibility\n        require(absTick <= uint256(int256(MAX_TICK)), \"T\");\n\n        uint256 ratio = absTick & 0x1 != 0\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\n            : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0)\n            ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0)\n            ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0)\n            ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0)\n            ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0)\n            ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0)\n            ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0)\n            ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0)\n            ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0)\n            ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0)\n            ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0)\n            ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0)\n            ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0)\n            ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0)\n            ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0)\n            ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0)\n            ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0)\n            ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0)\n            ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0)\n            ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160(\n            (ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1)\n        );\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96)\n        internal\n        pure\n        returns (int24 tick)\n    {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(\n            sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO,\n            \"R\"\n        );\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24(\n            (log_sqrt10001 - 3402992956809132418596140100660247210) >> 128\n        );\n        int24 tickHi = int24(\n            (log_sqrt10001 + 291339464771989622907027621153398088495) >> 128\n        );\n\n        tick = tickLow == tickHi\n            ? tickLow\n            : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\n            ? tickHi\n            : tickLow;\n    }\n}\n"
    },
    "contracts/libraries/Position.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nlibrary Position {\n    function getPositionId(\n        address self_,\n        int24 lowerTick_,\n        int24 upperTick_\n    ) public pure returns (bytes32 positionId) {\n        return keccak256(abi.encodePacked(self_, lowerTick_, upperTick_));\n    }\n}\n"
    },
    "contracts/ArrakisV2Resolver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.13;\n\nimport {\n    IUniswapV3Factory\n} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\";\nimport {\n    IUniswapV3Pool\n} from \"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {\n    IERC20Metadata\n} from \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport {\n    BurnLiquidity,\n    PositionLiquidity,\n    UnderlyingOutput,\n    UnderlyingPayload,\n    Range,\n    RangeWeight,\n    Rebalance\n} from \"./structs/SArrakisV2.sol\";\n\nimport {IArrakisV2Resolver} from \"./interfaces/IArrakisV2Resolver.sol\";\nimport {IArrakisV2Helper} from \"./interfaces/IArrakisV2Helper.sol\";\nimport {IArrakisV2} from \"./interfaces/IArrakisV2.sol\";\n\nimport {FullMath} from \"@arrakisfi/v3-lib-0.8/contracts/FullMath.sol\";\nimport {TickMath} from \"@arrakisfi/v3-lib-0.8/contracts/TickMath.sol\";\nimport {\n    LiquidityAmounts\n} from \"@arrakisfi/v3-lib-0.8/contracts/LiquidityAmounts.sol\";\n\nimport {Underlying as UnderlyingHelper} from \"./libraries/Underlying.sol\";\nimport {UniswapV3Amounts} from \"./libraries/UniswapV3Amounts.sol\";\nimport {Position as PositionHelper} from \"./libraries/Position.sol\";\n\ncontract ArrakisV2Resolver is IArrakisV2Resolver {\n    using TickMath for int24;\n\n    IUniswapV3Factory public immutable factory;\n    IArrakisV2Helper public immutable helper;\n\n    constructor(IUniswapV3Factory factory_, IArrakisV2Helper helper_) {\n        factory = factory_;\n        helper = helper_;\n    }\n\n    // solhint-disable-next-line function-max-lines, code-complexity\n    function calculateSwapAmount(\n        IArrakisV2 vault,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 price18Decimals\n    ) external view override returns (bool zeroForOne, uint256 swapAmount) {\n        (uint256 gross0, uint256 gross1) = _getUnderlyingOrLiquidity(vault);\n        if (gross1 == 0) {\n            return (false, amount1In);\n        }\n        if (gross0 == 0) {\n            return (true, amount0In);\n        }\n\n        uint256 amount0Left;\n        uint256 amount1Left;\n        if (amount0In > 0 && amount1In > 0) {\n            (uint256 amount0, uint256 amount1, ) =\n                getMintAmounts(vault, amount0In, amount1In);\n            amount0Left = amount0In - amount0;\n            amount1Left = amount1In - amount1;\n        } else {\n            amount0Left = amount0In;\n            amount1Left = amount1In;\n        }\n\n        uint256 factor0 =\n            10**(18 - IERC20Metadata(address(vault.token0())).decimals());\n        uint256 factor1 =\n            10**(18 - IERC20Metadata(address(vault.token1())).decimals());\n        uint256 weightX18 =\n            FullMath.mulDiv(gross0 * factor0, 1 ether, gross1 * factor1);\n        uint256 proportionX18 =\n            FullMath.mulDiv(weightX18, price18Decimals, 1 ether);\n        uint256 factorX18 =\n            FullMath.mulDiv(proportionX18, 1 ether, proportionX18 + 1 ether);\n\n        if (amount0Left > amount1Left) {\n            zeroForOne = true;\n            swapAmount = FullMath.mulDiv(\n                amount0Left,\n                1 ether - factorX18,\n                1 ether\n            );\n        } else if (amount1Left > amount0Left) {\n            swapAmount = FullMath.mulDiv(amount1Left, factorX18, 1 ether);\n        }\n    }\n\n    function getEqualWeightsForRanges(IArrakisV2 vault)\n        external\n        view\n        override\n        returns (RangeWeight[] memory)\n    {\n        Range[] memory ranges = IArrakisV2(vault).rangesArray();\n        uint256 eachRangeWeight = 10000 / ranges.length;\n        RangeWeight[] memory rangeWeights = new RangeWeight[](ranges.length);\n        for (uint256 i = 0; i < ranges.length; i++) {\n            RangeWeight memory rangeWeight =\n                RangeWeight({range: ranges[i], weight: eachRangeWeight});\n            rangeWeights[i] = rangeWeight;\n        }\n        return rangeWeights;\n    }\n\n    // no swapping. Standard rebalance.\n    // solhint-disable-next-line function-max-lines\n    function standardRebalance(\n        RangeWeight[] memory rangeWeights_,\n        IArrakisV2 vaultV2_\n    ) external view returns (Rebalance memory rebalanceParams) {\n        uint256 amount0;\n        uint256 amount1;\n        address token0Addr;\n        address token1Addr;\n        {\n            Range[] memory ranges = vaultV2_.rangesArray();\n\n            token0Addr = address(vaultV2_.token0());\n            token1Addr = address(vaultV2_.token1());\n\n            (amount0, amount1) = helper.totalUnderlying(vaultV2_);\n\n            for (uint256 i = 0; i < ranges.length; i++) {\n                uint128 liquidity;\n                {\n                    (liquidity, , , , ) = IUniswapV3Pool(\n                        vaultV2_.factory().getPool(\n                            token0Addr,\n                            token1Addr,\n                            ranges[i].feeTier\n                        )\n                    )\n                        .positions(\n                        PositionHelper.getPositionId(\n                            address(vaultV2_),\n                            ranges[i].lowerTick,\n                            ranges[i].upperTick\n                        )\n                    );\n                }\n\n                if (liquidity > 0)\n                    rebalanceParams.removes[i] = PositionLiquidity({\n                        liquidity: liquidity,\n                        range: ranges[i]\n                    });\n            }\n        }\n\n        // TODO check if sum of weight is < 10000\n\n        _requireWeightUnder100(rangeWeights_);\n\n        rebalanceParams.deposits = new PositionLiquidity[](\n            rangeWeights_.length\n        );\n\n        for (uint256 i = 0; i < rangeWeights_.length; i++) {\n            RangeWeight memory rangeWeight = rangeWeights_[i];\n            (uint160 sqrtPriceX96, , , , , , ) =\n                IUniswapV3Pool(\n                    vaultV2_.factory().getPool(\n                        token0Addr,\n                        token1Addr,\n                        rangeWeight.range.feeTier\n                    )\n                )\n                    .slot0();\n\n            rebalanceParams.deposits[i] = PositionLiquidity({\n                liquidity: LiquidityAmounts.getLiquidityForAmounts(\n                    sqrtPriceX96,\n                    TickMath.getSqrtRatioAtTick(rangeWeight.range.lowerTick),\n                    TickMath.getSqrtRatioAtTick(rangeWeight.range.upperTick),\n                    FullMath.mulDiv(amount0, rangeWeight.weight, 10000),\n                    FullMath.mulDiv(amount1, rangeWeight.weight, 10000)\n                ),\n                range: rangeWeight.range\n            });\n        }\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function standardBurnParams(uint256 amountToBurn_, IArrakisV2 vaultV2_)\n        external\n        view\n        returns (BurnLiquidity[] memory burns)\n    {\n        uint256 totalSupply = vaultV2_.totalSupply();\n        require(totalSupply > 0, \"total supply\");\n\n        Range[] memory ranges = vaultV2_.rangesArray();\n\n        {\n            UnderlyingOutput memory underlying;\n            (\n                underlying.amount0,\n                underlying.amount1,\n                underlying.fee0,\n                underlying.fee1\n            ) = UnderlyingHelper.totalUnderlyingWithFees(\n                UnderlyingPayload({\n                    ranges: ranges,\n                    factory: factory,\n                    token0: address(vaultV2_.token0()),\n                    token1: address(vaultV2_.token1()),\n                    self: address(vaultV2_)\n                })\n            );\n            underlying.leftOver0 = vaultV2_.token0().balanceOf(\n                address(vaultV2_)\n            );\n            underlying.leftOver1 = vaultV2_.token1().balanceOf(\n                address(vaultV2_)\n            );\n\n            {\n                (uint256 fee0, uint256 fee1) =\n                    UniswapV3Amounts.subtractAdminFees(\n                        underlying.fee0,\n                        underlying.fee1,\n                        vaultV2_.manager().managerFeeBPS(),\n                        vaultV2_.arrakisFeeBPS()\n                    );\n                underlying.amount0 += underlying.leftOver0 + fee0;\n                underlying.amount1 += underlying.leftOver1 + fee1;\n            }\n\n            {\n                uint256 amount0 =\n                    FullMath.mulDiv(\n                        underlying.amount0,\n                        amountToBurn_,\n                        totalSupply\n                    );\n                uint256 amount1 =\n                    FullMath.mulDiv(\n                        underlying.amount1,\n                        amountToBurn_,\n                        totalSupply\n                    );\n\n                if (\n                    amount0 <= underlying.leftOver0 &&\n                    amount1 <= underlying.leftOver1\n                ) return burns;\n            }\n        }\n        // #endregion get amount to burn.\n\n        burns = new BurnLiquidity[](ranges.length);\n\n        for (uint256 i = 0; i < ranges.length; i++) {\n            uint128 liquidity;\n            {\n                (liquidity, , , , ) = IUniswapV3Pool(\n                    vaultV2_.factory().getPool(\n                        address(vaultV2_.token0()),\n                        address(vaultV2_.token1()),\n                        ranges[i].feeTier\n                    )\n                )\n                    .positions(\n                    PositionHelper.getPositionId(\n                        address(vaultV2_),\n                        ranges[i].lowerTick,\n                        ranges[i].upperTick\n                    )\n                );\n            }\n\n            burns[i] = BurnLiquidity({\n                liquidity: SafeCast.toUint128(\n                    FullMath.mulDiv(liquidity, amountToBurn_, totalSupply)\n                ),\n                range: ranges[i]\n            });\n        }\n    }\n\n    // solhint-disable-next-line function-max-lines\n    function getMintAmounts(\n        IArrakisV2 vaultV2_,\n        uint256 amount0Max_,\n        uint256 amount1Max_\n    )\n        public\n        view\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 mintAmount\n        )\n    {\n        (uint256 current0, uint256 current1) = helper.totalUnderlying(vaultV2_);\n\n        uint256 totalSupply = vaultV2_.totalSupply();\n        if (totalSupply > 0) {\n            (amount0, amount1, mintAmount) = UniswapV3Amounts\n                .computeMintAmounts(\n                current0,\n                current1,\n                totalSupply,\n                amount0Max_,\n                amount1Max_\n            );\n        } else {\n            (amount0, amount1, mintAmount) = UniswapV3Amounts\n                .computeMintAmounts(\n                vaultV2_.init0(),\n                vaultV2_.init1(),\n                1 ether,\n                amount0Max_,\n                amount1Max_\n            );\n        }\n    }\n\n    function getAmountsForLiquidity(\n        int24 currentTick_,\n        int24 lowerTick_,\n        int24 upperTick_,\n        uint128 liquidity_\n    ) public pure returns (uint256 amount0, uint256 amount1) {\n        return\n            LiquidityAmounts.getAmountsForLiquidity(\n                TickMath.getSqrtRatioAtTick(currentTick_),\n                TickMath.getSqrtRatioAtTick(lowerTick_),\n                TickMath.getSqrtRatioAtTick(upperTick_),\n                liquidity_\n            );\n    }\n\n    // #region view internal functions.\n    function _getUnderlyingOrLiquidity(IArrakisV2 vault)\n        internal\n        view\n        returns (uint256 gross0, uint256 gross1)\n    {\n        (gross0, gross1) = helper.totalUnderlying(vault);\n        if (gross0 == 0 && gross1 == 0) {\n            gross0 = vault.init0();\n            gross1 = vault.init1();\n        }\n    }\n\n    function _requireWeightUnder100(RangeWeight[] memory rangeWeights_)\n        internal\n        pure\n    {\n        uint256 totalWeight;\n        for (uint256 i; i < rangeWeights_.length; i++) {\n            totalWeight += rangeWeights_[i].weight;\n        }\n\n        require(totalWeight <= 10000, \"total weight\");\n    }\n\n    // #endregion view internal functions.\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCast {\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128) {\n        require(value >= type(int128).min && value <= type(int128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return int128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64) {\n        require(value >= type(int64).min && value <= type(int64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return int64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32) {\n        require(value >= type(int32).min && value <= type(int32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return int32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16) {\n        require(value >= type(int16).min && value <= type(int16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return int16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits.\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8) {\n        require(value >= type(int8).min && value <= type(int8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return int8(value);\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
    },
    "contracts/interfaces/IArrakisV2Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {\n    UnderlyingPayload,\n    UnderlyingOutput,\n    Range\n} from \"../structs/SArrakisV2.sol\";\nimport {Amount} from \"../structs/SArrakisV2Helper.sol\";\n\nimport {IArrakisV2} from \"./IArrakisV2.sol\";\n\ninterface IArrakisV2Helper {\n    function totalUnderlyingWithFeesAndLeftOver(IArrakisV2 vault_)\n        external\n        view\n        returns (UnderlyingOutput memory underlying);\n\n    function totalUnderlyingWithFees(IArrakisV2 vault_)\n        external\n        view\n        returns (\n            uint256 amount0,\n            uint256 amount1,\n            uint256 fee0,\n            uint256 fee1\n        );\n\n    function totalUnderlying(IArrakisV2 vault_)\n        external\n        view\n        returns (uint256 amount0, uint256 amount1);\n\n    function token0AndToken1ByRange(\n        Range[] calldata ranges_,\n        address token0_,\n        address token1_,\n        address vaultV2_\n    )\n        external\n        view\n        returns (Amount[] memory amount0s, Amount[] memory amount1s);\n}\n"
    },
    "contracts/structs/SArrakisV2Helper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.13;\n\nimport {Range} from \"./SArrakisV2.sol\";\n\nstruct Amount {\n    Range range;\n    uint256 amount;\n}\n"
    },
    "contracts/__mocks__/TempProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity >=0.8.13;\n\nimport {\n    ProxyAdmin\n} from \"@openzeppelin/contracts/proxy/transparent/ProxyAdmin.sol\";\n\n// solhint-disable-next-line no-empty-blocks\ncontract TempProxyAdmin is ProxyAdmin {\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 10
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
