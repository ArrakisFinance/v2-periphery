import fetch from "node-fetch";

type OneInchDataType = { to: string; data: string };

const approveTokenData = async (
  networkId: string,
  tokenAddress: string,
  amount: string
): Promise<OneInchDataType> => {
  try {
    const apiResponse = (await (
      await fetch(
        `https://api.1inch.io/v4.0/${networkId}/approve/transaction?amount=${amount}&tokenAddress=${tokenAddress}`
      )
    ).json()) as unknown as {
      data: string;
      gasPrice: string;
      to: string;
      value: string;
    };

    return {
      to: apiResponse.to,
      data: apiResponse.data,
    };
  } catch (error) {
    console.log(
      `1Inch approve data call failed, for ${amount} amount of ${tokenAddress}. Error : ${error}`
    );
    throw new Error(`approveTokenData: 1Inch approve data call failed.`);
  }
};

const swapTokenData = async (
  networkId: string,
  fromTokenAddress: string,
  toTokenAddress: string,
  amount: string,
  fromAddress: string,
  slippage: string
): Promise<OneInchDataType> => {
  try {
    const apiResponse = (await (
      await fetch(
        `https://api.1inch.io/v4.0/${networkId}/swap?fromTokenAddress=${fromTokenAddress}&toTokenAddress=${toTokenAddress}&amount=${amount}&fromAddress=${fromAddress}&slippage=${slippage}&disableEstimate=true&allowPartialFill=false&protocols=UNISWAP_V2`
      )
    ).json()) as unknown as {
      tx: {
        from: string;
        to: string;
        data: string;
        value: string;
        gasPrice: string;
        gas: string;
      };
    };

    return {
      to: apiResponse.tx.to,
      data: apiResponse.tx.data,
    };
  } catch (error) {
    console.log(
      `1Inch swap data call failed, wanted to swap ${amount} amount of ${fromTokenAddress} to ${toTokenAddress}, from ${fromAddress} with a slippage of ${slippage} . Error : ${error}`
    );
    throw new Error(`swapTokenData: 1Inch swap data call failed.`);
  }
};

const quote1Inch = async (
  networkId: string,
  fromTokenAddress: string,
  toTokenAddress: string,
  amount: string
): Promise<string> => {
  try {
    const apiResponse = (await (
      await fetch(
        `https://api.1inch.io/v4.0/${networkId}/quote?fromTokenAddress=${fromTokenAddress}&toTokenAddress=${toTokenAddress}&amount=${amount}&protocols=UNISWAP_V2`
      )
    ).json()) as unknown as {
      toTokenAmount: string;
    };

    return apiResponse.toTokenAmount;
  } catch (error) {
    console.log(
      `1Inch quote call failed, wanted to quote swap of ${amount} amount of ${fromTokenAddress} to ${toTokenAddress}. Error : ${error}`
    );
    throw new Error(`quote1Inch: 1Inch swap data call failed.`);
  }
};

// Because we pin a blockNumber in the tests,
// using live 1inch api often causes as the price on current vs pinned block can vary
// we store valid payloads from 1inch api for the pinned block here to be used in the tests
type MockPayloadObj = {
  swapIn: string;
  swapOut: string;
  payload: string;
};

type MockPayloadScenario = {
  [index: string]: MockPayloadObj;
};

type MockPayloads = {
  [vaultAddress: string]: MockPayloadScenario;
};
/* eslint-disable @typescript-eslint/naming-convention */
const mockPayloads: MockPayloads = {
  "DAI/WETH": {
    // should use A,B and swap A for B
    scenario1: {
      swapIn: "869356820562468685433",
      swapOut: "775999942932261387",
      payload:
        "0x2e95b6c80000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000002f20bfde4070f446790000000000000000000000000000000000000000000000000a3b0f71e0fda4bd0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340a478c2975ab1ea89e8196811f51a7b7ade33eb11cfee7c08",
    },

    // should use A,B and swap A for B and stake
    scenario2: {
      swapIn: "869356820562468685484",
      swapOut: "775999942932261387",
      payload:
        "0x2e95b6c80000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000002f20bfde4070f446ac0000000000000000000000000000000000000000000000000a3b0f71e0fda4bd0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340a478c2975ab1ea89e8196811f51a7b7ade33eb11cfee7c08",
    },

    // should use A,B and swap A for B using nativeETH
    scenario3: {
      swapIn: "869356820562468685487",
      swapOut: "775999942932261387",
      payload:
        "0x2e95b6c80000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000002f20bfde4070f446af0000000000000000000000000000000000000000000000000a3b0f71e0fda4bd0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340a478c2975ab1ea89e8196811f51a7b7ade33eb11cfee7c08",
    },

    // should use A,B and swap A for B and stake using nativeETH
    scenario4: {
      swapIn: "869356820562468685488",
      swapOut: "775999942932261387",
      payload:
        "0x2e95b6c80000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000002f20bfde4070f446b00000000000000000000000000000000000000000000000000a3b0f71e0fda4bd0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340a478c2975ab1ea89e8196811f51a7b7ade33eb11cfee7c08",
    },

    // should use only A and swap A for B
    // ... and stake
    // ... with native ETH
    // ... and stake with native ETH
    // ... with different msg.value and nativeETH
    scenario5: {
      swapIn: "1789425548644424260000",
      swapOut: "1597037876485576475",
      payload:
        "0x2e95b6c80000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000006101449fb58f6299a0000000000000000000000000000000000000000000000000150e209ce2ba85f30000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340a478c2975ab1ea89e8196811f51a7b7ade33eb11cfee7c08",
    },

    // should use A and B and revert with empty msg.value
    scenario6: {
      swapIn: "869356820562468685634",
      swapOut: "775999942932261387",
      payload:
        "0x2e95b6c80000000000000000000000006b175474e89094c44da98b954eedeac495271d0f00000000000000000000000000000000000000000000002f20bfde4070f447420000000000000000000000000000000000000000000000000a3b0f71e0fda4bd0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340a478c2975ab1ea89e8196811f51a7b7ade33eb11cfee7c08",
    },

    // should use only B and swap B for A
    // ... and stake
    // ... using native ETH
    // ... and stake using native ETH
    scenario7: {
      swapIn: "9999998250048657540",
      swapOut: "11115152389948478053271",
      payload:
        "0x2e95b6c8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac7216d18ad988400000000000000000000000000000000000000000000023c6d0a3da76c8343cf0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340a478c2975ab1ea89e8196811f51a7b7ade33eb11cfee7c08",
    },
  },
  "USDC/WETH": {
    // should use A,B and swap A for B
    // ... and stake
    scenario1: {
      swapIn: "5551153710",
      swapOut: "4962343337846800062",
      payload:
        "0x2e95b6c8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000014adfe22e000000000000000000000000000000000000000000000000416c4bb9b6972b9a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use A,B and swap A for B using native ETH
    // should use A,B and swap A for B and stake using native ETH
    scenario2: {
      swapIn: "5551153709",
      swapOut: "4962343336950283398",
      payload:
        "0x2e95b6c8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000014adfe22d000000000000000000000000000000000000000000000000416c4bb983d3664c0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use only A and swap A for B
    // ... and stake
    scenario3: {
      swapIn: "5998777536",
      swapOut: "5362437934772818814",
      payload:
        "0x2e95b6c8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000000000000001658e14c000000000000000000000000000000000000000000000000046b2a5721c9a3f510000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use only A and swap A for B using native ETH
    // should use only A and swap A for B and stake using native ETH
    // should use only A and swap A for B with different msg.value and nativeETH
    scenario4: {
      swapIn: "5999165111",
      swapOut: "5361918507269422360",
      payload:
        "0x2e95b6c8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000016593feb700000000000000000000000000000000000000000000000046b0e4a6675e0a0a0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use A and B and revert with empty msg.value
    scenario5: {
      swapIn: "5551512366",
      swapOut: "4961862665941353399",
      payload:
        "0x2e95b6c8000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000014ae55b2e000000000000000000000000000000000000000000000000416aac6a52525d210000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use only B and swap B for A
    scenario6: {
      swapIn: "9999987945125127830",
      swapOut: "11117466377",
      payload:
        "0x2e95b6c8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac7180dcb5f26960000000000000000000000000000000000000000000000000000000275851ee20000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use only B and swap B for A and stake
    scenario7: {
      swapIn: "9999987945125127880",
      swapOut: "11117466377",
      payload:
        "0x2e95b6c8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac7180dcb5f26c80000000000000000000000000000000000000000000000000000000275851ee20000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use only B and swap B for A with native ETH
    scenario8: {
      swapIn: "9999987918660433970",
      swapOut: "11093113030",
      payload:
        "0x2e95b6c8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac71807a1f3f83200000000000000000000000000000000000000000000000000000002742419220000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },

    // should use only B and swap B for A and stake with native ETH
    scenario9: {
      swapIn: "9999987918660434100",
      swapOut: "11093113030",
      payload:
        "0x2e95b6c8000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000008ac71807a1f3f8b400000000000000000000000000000000000000000000000000000002742419220000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000180000000000000003b6d0340b4e16d0168e52d35cacd2c6185b44281ec28c9dccfee7c08",
    },
  },
};

export {
  swapTokenData,
  quote1Inch,
  approveTokenData,
  mockPayloads,
  OneInchDataType,
  MockPayloads,
  MockPayloadScenario,
  MockPayloadObj,
};
